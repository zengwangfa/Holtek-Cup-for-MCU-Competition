<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\HT32F1656_DVB\Obj\HT32F1656_DVB.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\HT32F1656_DVB\Obj\HT32F1656_DVB.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Mon Sep 25 16:16:12 2017
<BR><P>
<H3>Maximum Stack Usage =         96 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
USB_IRQHandler &rArr; USBDCore_IRQHandler &rArr; USBD_EPTReadOUTData &rArr; USBD_EPTReadMemory &rArr; USBD_EPTGetBuffer1Addr &rArr; USBD_EPTGetBufferLen
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[23]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[74]">_USBD_CopyMemory</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[74]">_USBD_CopyMemory</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[23]">ADC_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[2e]">BFTM0_IRQHandler</a> from ht32f1655_56_it.o(i.BFTM0_IRQHandler) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[2f]">BFTM1_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[c]">BOD_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from ht32f1655_56_it.o(i.BusFault_Handler) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[a]">CKRDY_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[22]">COMP_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from ht32f1655_56_it.o(i.DebugMon_Handler) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[43]">EBI_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[10]">EVWUP_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[12]">EXTI0_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[1c]">EXTI10_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[1d]">EXTI11_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[1e]">EXTI12_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[1f]">EXTI13_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[20]">EXTI14_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[21]">EXTI15_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[13]">EXTI1_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[14]">EXTI2_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[15]">EXTI3_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[16]">EXTI4_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[17]">EXTI5_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[18]">EXTI6_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[19]">EXTI7_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[1a]">EXTI8_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[1b]">EXTI9_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[2c]">GPTM0_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[2d]">GPTM1_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from ht32f1655_56_it.o(i.HardFault_Handler) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[30]">I2C0_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[31]">I2C1_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[39]">I2S_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[11]">LPWUP_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[b]">LVD_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[24]">MCTM0BRK_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[27]">MCTM0CC_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[26]">MCTM0TR_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[25]">MCTM0UP_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[28]">MCTM1BRK_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[2b]">MCTM1CC_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[2a]">MCTM1TR_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[29]">MCTM1UP_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from ht32f1655_56_it.o(i.MemManage_Handler) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from ht32f1655_56_it.o(i.NMI_Handler) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[3b]">PDMA_CH0_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[3c]">PDMA_CH1_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[3d]">PDMA_CH2_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[3e]">PDMA_CH3_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[3f]">PDMA_CH4_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[40]">PDMA_CH5_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[41]">PDMA_CH6_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[42]">PDMA_CH7_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from ht32f1655_56_it.o(i.PendSV_Handler) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[e]">RTC_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[49]">Reset_Handler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[38]">SCI_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[48]">SERIAL_USBDClass_RXHandler</a> from ht32_serial.o(i.SERIAL_USBDClass_RXHandler) referenced from ht32_serial.o(i.USBDClass_Init)
 <LI><a href="#[47]">SERIAL_USBDClass_Request</a> from ht32_serial.o(i.SERIAL_USBDClass_Request) referenced from ht32_serial.o(i.USBDClass_Init)
 <LI><a href="#[32]">SPI0_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[33]">SPI1_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from ht32f1655_56_it.o(i.SVC_Handler) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from ht32f1655_56_it.o(i.SysTick_Handler) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[44]">SystemInit</a> from system_ht32f1655_56.o(i.SystemInit) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[36]">UART0_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[37]">UART1_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[34]">USART0_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[35]">USART1_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[3a]">USB_IRQHandler</a> from ht32_serial.o(i.USB_IRQHandler) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from ht32f1655_56_it.o(i.UsageFault_Handler) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[d]">WDT_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[45]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[49]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))

<P><STRONG><a name="[23]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>BFTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>CKRDY_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>EBI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EVWUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>GPTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>GPTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>LPWUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>MCTM0BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>MCTM0CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>MCTM0TR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>MCTM0UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>MCTM1BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>MCTM1CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>MCTM1TR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>MCTM1UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>PDMA_CH0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>PDMA_CH1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>PDMA_CH2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>PDMA_CH3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>PDMA_CH4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>PDMA_CH5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>PDMA_CH6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>PDMA_CH7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[83]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[84]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[85]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[86]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[87]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[4b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[88]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>AFIO_GPxConfig</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, ht32f1655_56_gpio.o(i.AFIO_GPxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e]"></a>BFTM0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1655_56_it.o(i.BFTM0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1655_56_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>CKCU_GetPLLFrequency</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ht32f1655_56_ckcu.o(i.CKCU_GetPLLFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CKCU_GetPLLFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_USBDInit
</UL>

<P><STRONG><a name="[51]"></a>CKCU_PeripClockConfig</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, ht32f1655_56_ckcu.o(i.CKCU_PeripClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_USBDInit
</UL>

<P><STRONG><a name="[53]"></a>CKCU_SetUSBPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f1655_56_ckcu.o(i.CKCU_SetUSBPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_USBDInit
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1655_56_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>GPTM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f1655_56_gptm.o(i.GPTM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>GPTM_OutputInit</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, ht32f1655_56_gptm.o(i.GPTM_OutputInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPTM_OutputInit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>GPTM_OutputStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f1655_56_gptm.o(i.GPTM_OutputStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>GPTM_TimeBaseInit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ht32f1655_56_gptm.o(i.GPTM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>GPTM_TimeBaseStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f1655_56_gptm.o(i.GPTM_TimeBaseStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1655_56_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1655_56_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1655_56_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1655_56_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>RETARGET_Configuration</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32_retarget.o(i.RETARGET_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RETARGET_Configuration &rArr; SERIAL_USBDInit &rArr; CKCU_PeripClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_USBDInit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>RSTCU_PeripReset</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, ht32f1655_56_rstcu.o(i.RSTCU_PeripReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RSTCU_PeripReset
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DeInit
</UL>

<P><STRONG><a name="[48]"></a>SERIAL_USBDClass_RXHandler</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ht32_serial.o(i.SERIAL_USBDClass_RXHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SERIAL_USBDClass_RXHandler &rArr; USBD_EPTReadOUTData &rArr; USBD_EPTReadMemory &rArr; USBD_EPTGetBuffer1Addr &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadOUTData
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetTransferCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ht32_serial.o(i.USBDClass_Init)
</UL>
<P><STRONG><a name="[47]"></a>SERIAL_USBDClass_Request</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ht32_serial.o(i.SERIAL_USBDClass_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SERIAL_USBDClass_Request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ht32_serial.o(i.USBDClass_Init)
</UL>
<P><STRONG><a name="[4e]"></a>SERIAL_USBDInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, ht32_serial.o(i.SERIAL_USBDInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SERIAL_USBDInit &rArr; CKCU_PeripClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_MainRoutine
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_SetUSBPrescaler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPLLFrequency
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDesc_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDClass_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETARGET_Configuration
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1655_56_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1655_56_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_ht32f1655_56.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>USBDClass_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32_serial.o(i.USBDClass_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_USBDInit
</UL>

<P><STRONG><a name="[58]"></a>USBDCore_IRQHandler</STRONG> (Thumb, 434 bytes, Stack size 24 bytes, ht32_usbd_core.o(i.USBDCore_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBDCore_IRQHandler &rArr; USBD_EPTReadOUTData &rArr; USBD_EPTReadMemory &rArr; USBD_EPTGetBuffer1Addr &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadSETUPData
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerOn
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerOff
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetINT
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetEPTnINTNumber
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EnableINT
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTSendSTALL
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadOUTData
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetINT
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearINT
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DeInit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClearINT
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_Request
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_ControlIN
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[56]"></a>USBDCore_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32_usbd_core.o(i.USBDCore_Init))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_USBDInit
</UL>

<P><STRONG><a name="[57]"></a>USBDCore_MainRoutine</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ht32_usbd_core.o(i.USBDCore_MainRoutine))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBDCore_MainRoutine &rArr; USBD_PowerUp
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerUp
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_USBDInit
</UL>

<P><STRONG><a name="[54]"></a>USBDDesc_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32_serial.o(i.USBDDesc_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_USBDInit
</UL>

<P><STRONG><a name="[5a]"></a>USBD_ClearINT</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i.USBD_ClearINT))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[77]"></a>USBD_DPWakeUpCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i.USBD_DPWakeUpCmd))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerUp
</UL>

<P><STRONG><a name="[78]"></a>USBD_DPpullupCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i.USBD_DPpullupCmd))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerUp
</UL>

<P><STRONG><a name="[5c]"></a>USBD_DeInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i.USBD_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBD_DeInit &rArr; RSTCU_PeripReset
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTCU_PeripReset
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[6b]"></a>USBD_EPTClearDTG</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ht32f1655_56_usbd.o(i.USBD_EPTClearDTG))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTClearDTG
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_SetClearFeature
</UL>

<P><STRONG><a name="[6d]"></a>USBD_EPTClearHalt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ht32f1655_56_usbd.o(i.USBD_EPTClearHalt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTClearHalt
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_SetClearFeature
</UL>

<P><STRONG><a name="[64]"></a>USBD_EPTClearINT</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ht32f1655_56_usbd.o(i.USBD_EPTClearINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTClearINT
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[6e]"></a>USBD_EPTGetBuffer0Addr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ht32f1655_56_usbd.o(i.USBD_EPTGetBuffer0Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTGetBuffer0Addr
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadMemory
</UL>

<P><STRONG><a name="[6f]"></a>USBD_EPTGetBuffer1Addr</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ht32f1655_56_usbd.o(i.USBD_EPTGetBuffer1Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_EPTGetBuffer1Addr &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBufferLen
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadMemory
</UL>

<P><STRONG><a name="[70]"></a>USBD_EPTGetBufferLen</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ht32f1655_56_usbd.o(i.USBD_EPTGetBufferLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_ControlIN
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer1Addr
</UL>

<P><STRONG><a name="[71]"></a>USBD_EPTGetHalt</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ht32f1655_56_usbd.o(i.USBD_EPTGetHalt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTGetHalt
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_GetStatus
</UL>

<P><STRONG><a name="[60]"></a>USBD_EPTGetINT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ht32f1655_56_usbd.o(i.USBD_EPTGetINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTGetINT
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[4f]"></a>USBD_EPTGetTransferCount</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ht32f1655_56_usbd.o(i.USBD_EPTGetTransferCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTGetTransferCount
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_USBDClass_RXHandler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadMemory
</UL>

<P><STRONG><a name="[5e]"></a>USBD_EPTInit</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ht32f1655_56_usbd.o(i.USBD_EPTInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_EPTInit &rArr; USBD_EPTReset
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReset
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_Request
</UL>

<P><STRONG><a name="[73]"></a>USBD_EPTReadMemory</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ht32f1655_56_usbd.o(i.USBD_EPTReadMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_EPTReadMemory &rArr; USBD_EPTGetBuffer1Addr &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetTransferCount
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer1Addr
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer0Addr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_CopyMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadOUTData
</UL>

<P><STRONG><a name="[50]"></a>USBD_EPTReadOUTData</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ht32f1655_56_usbd.o(i.USBD_EPTReadOUTData))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_EPTReadOUTData &rArr; USBD_EPTReadMemory &rArr; USBD_EPTGetBuffer1Addr &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadMemory
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_USBDClass_RXHandler
</UL>

<P><STRONG><a name="[72]"></a>USBD_EPTReset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ht32f1655_56_usbd.o(i.USBD_EPTReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTReset
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTInit
</UL>

<P><STRONG><a name="[63]"></a>USBD_EPTSendSTALL</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ht32f1655_56_usbd.o(i.USBD_EPTSendSTALL))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTSendSTALL
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[75]"></a>USBD_EPTSetHalt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ht32f1655_56_usbd.o(i.USBD_EPTSetHalt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTSetHalt
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_SetClearFeature
</UL>

<P><STRONG><a name="[66]"></a>USBD_EPTWriteINData</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ht32f1655_56_usbd.o(i.USBD_EPTWriteINData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_EPTWriteINData &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBufferLen
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetTransferCount
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer0Addr
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_CopyMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_ControlIN
</UL>

<P><STRONG><a name="[5f]"></a>USBD_EnableINT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i.USBD_EnableINT))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerUp
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[67]"></a>USBD_GetEPTnINTNumber</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i.USBD_GetEPTnINTNumber))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[59]"></a>USBD_GetINT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i.USBD_GetINT))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[68]"></a>USBD_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i.USBD_Init))
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_Init
</UL>

<P><STRONG><a name="[5b]"></a>USBD_PowerOff</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i.USBD_PowerOff))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[5d]"></a>USBD_PowerOn</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i.USBD_PowerOn))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[69]"></a>USBD_PowerUp</STRONG> (Thumb, 94 bytes, Stack size 4 bytes, ht32f1655_56_usbd.o(i.USBD_PowerUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBD_PowerUp
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EnableINT
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DPpullupCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DPWakeUpCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_MainRoutine
</UL>

<P><STRONG><a name="[76]"></a>USBD_PreInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i.USBD_PreInit))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[61]"></a>USBD_ReadSETUPData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i.USBD_ReadSETUPData))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[7b]"></a>USBD_SetAddress</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i.USBD_SetAddress))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_Request
</UL>

<P><STRONG><a name="[3a]"></a>USB_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32_serial.o(i.USB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USB_IRQHandler &rArr; USBDCore_IRQHandler &rArr; USBD_EPTReadOUTData &rArr; USBD_EPTReadMemory &rArr; USBD_EPTGetBuffer1Addr &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1655_56_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[8a]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[8b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = main &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETARGET_Configuration
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_TimeBaseStructInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_TimeBaseInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_OutputStructInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_OutputInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_Cmd
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[65]"></a>_USBDCore_ControlIN</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ht32_usbd_core.o(i._USBDCore_ControlIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _USBDCore_ControlIN &rArr; USBD_EPTWriteINData &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBufferLen
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[79]"></a>_USBDCore_Standard_GetStatus</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ht32_usbd_core.o(i._USBDCore_Standard_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _USBDCore_Standard_GetStatus &rArr; USBD_EPTGetHalt
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetHalt
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_Request
</UL>

<P><STRONG><a name="[62]"></a>_USBDCore_Standard_Request</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, ht32_usbd_core.o(i._USBDCore_Standard_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _USBDCore_Standard_Request &rArr; USBD_EPTInit &rArr; USBD_EPTReset
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTInit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_SetClearFeature
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[7a]"></a>_USBDCore_Standard_SetClearFeature</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ht32_usbd_core.o(i._USBDCore_Standard_SetClearFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _USBDCore_Standard_SetClearFeature &rArr; USBD_EPTSetHalt
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTSetHalt
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearHalt
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearDTG
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_Request
</UL>

<P><STRONG><a name="[74]"></a>_USBD_CopyMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i._USBD_CopyMemory))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_CopyMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadMemory
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_CopyMemory
</UL>

<P><STRONG><a name="[6c]"></a>_USBD_GetEPTnAddr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i._USBD_GetEPTnAddr))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTSetHalt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTSendSTALL
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadOUTData
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetINT
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetHalt
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBufferLen
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearINT
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearHalt
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearDTG
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReset
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetTransferCount
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer1Addr
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer0Addr
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
