<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\HT32\Obj\HT32.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\HT32\Obj\HT32.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Thu Apr 05 22:31:56 2018
<BR><P>
<H3>Maximum Stack Usage =        396 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
BFTM0_IRQHandler &rArr; Start_serving &rArr; control_line &rArr; Fuzzy &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[23]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[23]">ADC_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[2e]">BFTM0_IRQHandler</a> from ht32f165x_it.o(i.BFTM0_IRQHandler) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[2f]">BFTM1_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[c]">BOD_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[a]">CKRDY_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[22]">COMP_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[43]">EBI_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[10]">EVWUP_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[12]">EXTI0_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[1c]">EXTI10_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[1d]">EXTI11_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[1e]">EXTI12_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[1f]">EXTI13_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[20]">EXTI14_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[21]">EXTI15_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[13]">EXTI1_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[14]">EXTI2_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[15]">EXTI3_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[16]">EXTI4_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[17]">EXTI5_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[18]">EXTI6_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[19]">EXTI7_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[1a]">EXTI8_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[1b]">EXTI9_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[2c]">GPTM0_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[2d]">GPTM1_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[30]">I2C0_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[31]">I2C1_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[39]">I2S_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[11]">LPWUP_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[b]">LVD_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[24]">MCTM0BRK_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[27]">MCTM0CC_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[26]">MCTM0TR_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[25]">MCTM0UP_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[28]">MCTM1BRK_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[2b]">MCTM1CC_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[2a]">MCTM1TR_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[29]">MCTM1UP_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[3b]">PDMA_CH0_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[3c]">PDMA_CH1_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[3d]">PDMA_CH2_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[3e]">PDMA_CH3_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[3f]">PDMA_CH4_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[40]">PDMA_CH5_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[41]">PDMA_CH6_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[42]">PDMA_CH7_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[e]">RTC_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[47]">Reset_Handler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[38]">SCI_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[32]">SPI0_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[33]">SPI1_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from ht32f165x_it.o(i.SysTick_Handler) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[44]">SystemInit</a> from system_ht32f165x.o(i.SystemInit) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[36]">UART0_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[37]">UART1_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[34]">USART0_IRQHandler</a> from my_interruput.o(i.USART0_IRQHandler) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[35]">USART1_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[3a]">USB_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[d]">WDT_IRQHandler</a> from startup_ht32f165x.o(RESET) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[45]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_ht32f165x.o(RESET)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[47]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>BFTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>CKRDY_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>EBI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EVWUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>GPTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>GPTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>LPWUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>MCTM0BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>MCTM0CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>MCTM0TR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>MCTM0UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>MCTM1BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>MCTM1CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>MCTM1TR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>MCTM1UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>PDMA_CH0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>PDMA_CH1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>PDMA_CH2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>PDMA_CH3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>PDMA_CH4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>PDMA_CH5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>PDMA_CH6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>PDMA_CH7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f165x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[48]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[59]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[bf]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[c0]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[c1]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[c2]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[c3]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[c4]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fuzzy
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fuzzy
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_line
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fuzzy
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fuzzy
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fuzzy
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_line
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fuzzy
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fuzzy
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fuzzy
</UL>

<P><STRONG><a name="[c7]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[4b]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[58]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[51]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[49]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[c8]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[c9]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[ca]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ht32f1655_56_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[9f]"></a>ADC_RegularGroupConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ht32f1655_56_adc.o(i.ADC_RegularGroupConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_RegularGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[a1]"></a>ADC_RegularTrigConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f1655_56_adc.o(i.ADC_RegularTrigConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[a2]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f1655_56_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[6d]"></a>AFIO_GPxConfig</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, ht32f1655_56_gpio.o(i.AFIO_GPxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart0_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm2_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm1_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Control_IO_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INPUT_Line_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIR_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e]"></a>BFTM0_IRQHandler</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, ht32f165x_it.o(i.BFTM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = BFTM0_IRQHandler &rArr; Start_serving &rArr; control_line &rArr; Fuzzy &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_control
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_ClearFlag
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_status
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_back
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_res
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dodge
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charging
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backwait
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_serving
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>BFTM_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ht32f1655_56_bftm.o(i.BFTM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM0_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>BFTM_EnaCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f1655_56_bftm.o(i.BFTM_EnaCmd))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>BFTM_IntConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f1655_56_bftm.o(i.BFTM_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>BFTM_SetCompare</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f1655_56_bftm.o(i.BFTM_SetCompare))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>BFTM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f1655_56_bftm.o(i.BFTM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>CKCU_GetClocksFrequency</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ht32f1655_56_ckcu.o(i.CKCU_GetClocksFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CKCU_GetClocksFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPLLFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[65]"></a>CKCU_GetPLLFrequency</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ht32f1655_56_ckcu.o(i.CKCU_GetPLLFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
</UL>

<P><STRONG><a name="[66]"></a>CKCU_GetUSARTClockFreq</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, ht32f1655_56_ckcu.o(i.CKCU_GetUSARTClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CKCU_GetUSARTClockFreq &rArr; CKCU_GetClocksFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[90]"></a>CKCU_PeripClockConfig</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, ht32f1655_56_ckcu.o(i.CKCU_PeripClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[9e]"></a>CKCU_SetADCPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f1655_56_ckcu.o(i.CKCU_SetADCPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[67]"></a>CalulateCRC</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, rc522.o(i.CalulateCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CalulateCRC &rArr; SetBitMask &rArr; WriteRawRC
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRead
</UL>

<P><STRONG><a name="[68]"></a>ClearBitMask</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rc522.o(i.ClearBitMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ClearBitMask &rArr; WriteRawRC
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PcdConfigISOType
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
</UL>

<P><STRONG><a name="[6c]"></a>DIR_Init</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, controll_main.o(i.DIR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DIR_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>Delay</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, delay.o(i.Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_CounterCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
</UL>

<P><STRONG><a name="[71]"></a>Fuzzy</STRONG> (Thumb, 928 bytes, Stack size 304 bytes, fuzzy.o(i.Fuzzy))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = Fuzzy &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_line
</UL>

<P><STRONG><a name="[6e]"></a>GPIO_DirectionConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f1655_56_gpio.o(i.GPIO_DirectionConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Control_IO_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INPUT_Line_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIR_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>GPIO_InputConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f1655_56_gpio.o(i.GPIO_InputConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Control_IO_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INPUT_Line_Init
</UL>

<P><STRONG><a name="[78]"></a>GPIO_PullResistorConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ht32f1655_56_gpio.o(i.GPIO_PullResistorConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Control_IO_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INPUT_Line_Init
</UL>

<P><STRONG><a name="[7b]"></a>GPIO_ReadInBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f1655_56_gpio.o(i.GPIO_ReadInBit))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_display
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_line
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRLED
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
</UL>

<P><STRONG><a name="[85]"></a>GPIO_WriteOutBits</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f1655_56_gpio.o(i.GPIO_WriteOutBits))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
</UL>

<P><STRONG><a name="[bd]"></a>GPTM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f1655_56_gptm.o(i.GPTM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm2_init
</UL>

<P><STRONG><a name="[bc]"></a>GPTM_OutputInit</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, ht32f1655_56_gptm.o(i.GPTM_OutputInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPTM_OutputInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm2_init
</UL>

<P><STRONG><a name="[bb]"></a>GPTM_OutputStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f1655_56_gptm.o(i.GPTM_OutputStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm2_init
</UL>

<P><STRONG><a name="[a7]"></a>GPTM_SetCounterReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f1655_56_gptm.o(i.GPTM_SetCounterReload))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_back
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_RI
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dodge
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_line
</UL>

<P><STRONG><a name="[ba]"></a>GPTM_TimeBaseInit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ht32f1655_56_gptm.o(i.GPTM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm2_init
</UL>

<P><STRONG><a name="[b9]"></a>GPTM_TimeBaseStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f1655_56_gptm.o(i.GPTM_TimeBaseStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm2_init
</UL>

<P><STRONG><a name="[77]"></a>INPUT_Line_Init</STRONG> (Thumb, 328 bytes, Stack size 8 bytes, controll_main.o(i.INPUT_Line_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = INPUT_Line_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>IRLED</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(i.IRLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRLED &rArr; insert_filemusic
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_filemusic
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>M500PcdConfigISOType</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, rc522.o(i.M500PcdConfigISOType))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = M500PcdConfigISOType &rArr; PcdAntennaOn &rArr; SetBitMask &rArr; WriteRawRC
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOn
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>MCTM_CHMOECmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f1655_56_mctm.o(i.MCTM_CHMOECmd))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm1_init
</UL>

<P><STRONG><a name="[b8]"></a>MCTM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f1655_56_mctm.o(i.MCTM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm1_init
</UL>

<P><STRONG><a name="[b6]"></a>MCTM_OutputInit</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, ht32f1655_56_mctm.o(i.MCTM_OutputInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MCTM_OutputInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm1_init
</UL>

<P><STRONG><a name="[a6]"></a>MCTM_SetCounterReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f1655_56_mctm.o(i.MCTM_SetCounterReload))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_back
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_RI
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dodge
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_line
</UL>

<P><STRONG><a name="[b5]"></a>MCTM_TimeBaseInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ht32f1655_56_mctm.o(i.MCTM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm1_init
</UL>

<P><STRONG><a name="[7e]"></a>PcdAntennaOn</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rc522.o(i.PcdAntennaOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PcdAntennaOn &rArr; SetBitMask &rArr; WriteRawRC
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PcdConfigISOType
</UL>

<P><STRONG><a name="[7f]"></a>PcdAnticoll</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, rc522.o(i.PcdAnticoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PcdAnticoll &rArr; PcdComMF522 &rArr; SetBitMask &rArr; WriteRawRC
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidCardRead
</UL>

<P><STRONG><a name="[81]"></a>PcdAuthState</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, rc522.o(i.PcdAuthState))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PcdAuthState &rArr; PcdComMF522 &rArr; SetBitMask &rArr; WriteRawRC
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidCardRead
</UL>

<P><STRONG><a name="[80]"></a>PcdComMF522</STRONG> (Thumb, 274 bytes, Stack size 56 bytes, rc522.o(i.PcdComMF522))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PcdComMF522 &rArr; SetBitMask &rArr; WriteRawRC
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRead
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
</UL>

<P><STRONG><a name="[82]"></a>PcdRead</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, rc522.o(i.PcdRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PcdRead &rArr; PcdComMF522 &rArr; SetBitMask &rArr; WriteRawRC
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidCardRead
</UL>

<P><STRONG><a name="[83]"></a>PcdRequest</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, rc522.o(i.PcdRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PcdRequest &rArr; PcdComMF522 &rArr; SetBitMask &rArr; WriteRawRC
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidCardRead
</UL>

<P><STRONG><a name="[84]"></a>PcdReset</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, rc522.o(i.PcdReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PcdReset &rArr; WriteRawRC
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>PcdSelect</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, rc522.o(i.PcdSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PcdSelect &rArr; PcdComMF522 &rArr; SetBitMask &rArr; WriteRawRC
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidCardRead
</UL>

<P><STRONG><a name="[87]"></a>RC522_Control_IO_Init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, rc522.o(i.RC522_Control_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RC522_Control_IO_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>RFID_read</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, main.o(i.RFID_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RFID_read &rArr; RfidCardRead &rArr; PcdAnticoll &rArr; PcdComMF522 &rArr; SetBitMask &rArr; WriteRawRC
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidCardRead
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_status1
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>ReadData</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, controll_main.o(i.ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ReadData &rArr; led_display
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_display
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_control
</UL>

<P><STRONG><a name="[6b]"></a>ReadRawRC</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, rc522.o(i.ReadRawRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReadRawRC
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOn
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
</UL>

<P><STRONG><a name="[89]"></a>RfidCardRead</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, app_com.o(i.RfidCardRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RfidCardRead &rArr; PcdAnticoll &rArr; PcdComMF522 &rArr; SetBitMask &rArr; WriteRawRC
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRead
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_read
</UL>

<P><STRONG><a name="[a9]"></a>SYSTICK_ClockSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32_cm3_misc.o(i.SYSTICK_ClockSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[70]"></a>SYSTICK_CounterCmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ht32_cm3_misc.o(i.SYSTICK_CounterCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>

<P><STRONG><a name="[ab]"></a>SYSTICK_IntConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32_cm3_misc.o(i.SYSTICK_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[aa]"></a>SYSTICK_SetReloadValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht32_cm3_misc.o(i.SYSTICK_SetReloadValue))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[6a]"></a>SetBitMask</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rc522.o(i.SetBitMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetBitMask &rArr; WriteRawRC
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOn
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
</UL>

<P><STRONG><a name="[5e]"></a>Start_serving</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ht32f165x_it.o(i.Start_serving))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = Start_serving &rArr; control_line &rArr; Fuzzy &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_status
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_line
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_filemusic
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM0_IRQHandler
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f165x_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_ht32f165x.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>System_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, controll_main.o(i.System_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = System_Init &rArr; CKCU_PeripClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>TimingDelay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, delay.o(i.TimingDelay))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[91]"></a>UART_other</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, my_interruput.o(i.UART_other))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_other
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[34]"></a>USART0_IRQHandler</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, my_interruput.o(i.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART0_IRQHandler &rArr; UART_other
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_other
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f165x.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>USART_FIFOReset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht32f1655_56_usart.o(i.USART_FIFOReset))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Interrupt_Init
</UL>

<P><STRONG><a name="[95]"></a>USART_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ht32f1655_56_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART_Init &rArr; CKCU_GetUSARTClockFreq &rArr; CKCU_GetClocksFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetUSARTClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Interrupt_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
</UL>

<P><STRONG><a name="[92]"></a>USART_IntConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f1655_56_usart.o(i.USART_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Interrupt_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_other
</UL>

<P><STRONG><a name="[96]"></a>USART_Interrupt_Init</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, my_interruput.o(i.USART_Interrupt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USART_Interrupt_Init &rArr; USART_Init &rArr; CKCU_GetUSARTClockFreq &rArr; CKCU_GetClocksFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxCmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TFITLConfig
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RxCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RFITLConfig
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntConfig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FIFOReset
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart0_init
</UL>

<P><STRONG><a name="[9a]"></a>USART_RFITLConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f1655_56_usart.o(i.USART_RFITLConfig))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Interrupt_Init
</UL>

<P><STRONG><a name="[94]"></a>USART_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f1655_56_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[9b]"></a>USART_RxCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f1655_56_usart.o(i.USART_RxCmd))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Interrupt_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
</UL>

<P><STRONG><a name="[93]"></a>USART_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f1655_56_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_other
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_status
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_filemusic
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chose_music
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_status1
</UL>

<P><STRONG><a name="[98]"></a>USART_TFITLConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f1655_56_usart.o(i.USART_TFITLConfig))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Interrupt_Init
</UL>

<P><STRONG><a name="[99]"></a>USART_TxCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f1655_56_usart.o(i.USART_TxCmd))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Interrupt_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
</UL>

<P><STRONG><a name="[69]"></a>WriteRawRC</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, rc522.o(i.WriteRawRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WriteRawRC
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PcdConfigISOType
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
</UL>

<P><STRONG><a name="[cb]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[cc]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[cd]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[9d]"></a>adc_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, controll_main.o(i.adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = adc_init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_SetADCPrescaler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularTrigConfig
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularGroupConfig
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>backwait</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ht32f165x_it.o(i.backwait))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = backwait &rArr; control_line &rArr; Fuzzy &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_status
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_line
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM0_IRQHandler
</UL>

<P><STRONG><a name="[61]"></a>charging</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ht32f165x_it.o(i.charging))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = charging &rArr; control_line &rArr; Fuzzy &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_status
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_line
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM0_IRQHandler
</UL>

<P><STRONG><a name="[a3]"></a>chose_music</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, voice.o(i.chose_music))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chose_music
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>control_line</STRONG> (Thumb, 440 bytes, Stack size 40 bytes, ht32f165x_it.o(i.control_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = control_line &rArr; Fuzzy &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_control
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCTM_SetCounterReload
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_SetCounterReload
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fuzzy
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_RI
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_abs
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charging
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backwait
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_serving
</UL>

<P><STRONG><a name="[a8]"></a>delay_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_SetReloadValue
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_IntConfig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_ClockSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>dodge</STRONG> (Thumb, 440 bytes, Stack size 40 bytes, ht32f165x_it.o(i.dodge))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dodge &rArr; usart_status
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCTM_SetCounterReload
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_SetCounterReload
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_status
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM0_IRQHandler
</UL>

<P><STRONG><a name="[ac]"></a>infrared_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, controll_main.o(i.infrared_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = infrared_init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>insert_filemusic</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, voice.o(i.insert_filemusic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = insert_filemusic
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_serving
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRLED
</UL>

<P><STRONG><a name="[8c]"></a>led_display</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, controll_main.o(i.led_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = led_display
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 290 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = main &rArr; RFID_read &rArr; RfidCardRead &rArr; PcdAnticoll &rArr; PcdComMF522 &rArr; SetBitMask &rArr; WriteRawRC
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart0_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm2_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm1_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chose_music
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Control_IO_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PcdConfigISOType
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INPUT_Line_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIR_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_SetCounter
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_SetCompare
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_IntConfig
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_EnaCmd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_read
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRLED
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[a4]"></a>my_abs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht32f165x_it.o(i.my_abs))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_line
</UL>

<P><STRONG><a name="[ad]"></a>pwm1_init</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, controll_main.o(i.pwm1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pwm1_init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCTM_TimeBaseInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCTM_OutputInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCTM_Cmd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCTM_CHMOECmd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>pwm2_init</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, controll_main.o(i.pwm2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pwm2_init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_TimeBaseStructInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_TimeBaseInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_OutputStructInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_OutputInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_Cmd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>status_res</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ht32f165x_it.o(i.status_res))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = status_res &rArr; usart_status
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_status
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM0_IRQHandler
</UL>

<P><STRONG><a name="[5b]"></a>step_control</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, controll_main.o(i.step_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = step_control &rArr; ReadData &rArr; led_display
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_line
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM0_IRQHandler
</UL>

<P><STRONG><a name="[5c]"></a>stop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ht32f165x_it.o(i.stop))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_back
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dodge
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charging
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backwait
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_serving
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM0_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>turn_RI</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, ht32f165x_it.o(i.turn_RI))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = turn_RI
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCTM_SetCounterReload
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_SetCounterReload
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_line
</UL>

<P><STRONG><a name="[63]"></a>turn_back</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, ht32f165x_it.o(i.turn_back))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = turn_back &rArr; usart_status
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCTM_SetCounterReload
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_SetCounterReload
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_status
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM0_IRQHandler
</UL>

<P><STRONG><a name="[af]"></a>usart0_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, uart.o(i.usart0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = usart0_init &rArr; USART_Interrupt_Init &rArr; USART_Init &rArr; CKCU_GetUSARTClockFreq &rArr; CKCU_GetClocksFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Interrupt_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>usart1_init</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, uart.o(i.usart1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = usart1_init &rArr; USART_Init &rArr; CKCU_GetUSARTClockFreq &rArr; CKCU_GetClocksFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RxCmd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>usart_status</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, ht32f165x_it.o(i.usart_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usart_status
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_back
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_res
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dodge
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charging
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backwait
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_serving
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM0_IRQHandler
</UL>

<P><STRONG><a name="[8a]"></a>usart_status1</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, main.o(i.usart_status1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usart_status1
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_read
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9c]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, my_interruput.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Interrupt_Init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
