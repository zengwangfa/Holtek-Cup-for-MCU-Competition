<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\HT32F1656_DVB\Obj\HT32F1656_DVB.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\HT32F1656_DVB\Obj\HT32F1656_DVB.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Fri Oct 19 23:54:09 2018
<BR><P>
<H3>Maximum Stack Usage =        144 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
BFTM0_IRQHandler &rArr; UART_Send_Temp &rArr; DS18B20_Get_Temp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[23]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[c5]">_USBD_CopyMemory</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c5]">_USBD_CopyMemory</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[23]">ADC_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[2e]">BFTM0_IRQHandler</a> from ht32f1655_56_it_1.o(i.BFTM0_IRQHandler) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[2f]">BFTM1_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[c]">BOD_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from ht32f1655_56_it_1.o(i.BusFault_Handler) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[a]">CKRDY_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[22]">COMP_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from ht32f1655_56_it_1.o(i.DebugMon_Handler) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[43]">EBI_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[10]">EVWUP_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[12]">EXTI0_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[1c]">EXTI10_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[1d]">EXTI11_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[1e]">EXTI12_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[1f]">EXTI13_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[20]">EXTI14_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[21]">EXTI15_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[13]">EXTI1_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[14]">EXTI2_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[15]">EXTI3_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[16]">EXTI4_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[17]">EXTI5_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[18]">EXTI6_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[19]">EXTI7_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[1a]">EXTI8_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[1b]">EXTI9_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[2c]">GPTM0_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[2d]">GPTM1_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from ht32f1655_56_it_1.o(i.HardFault_Handler) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[30]">I2C0_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[31]">I2C1_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[39]">I2S_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[11]">LPWUP_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[b]">LVD_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[24]">MCTM0BRK_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[27]">MCTM0CC_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[26]">MCTM0TR_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[25]">MCTM0UP_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[28]">MCTM1BRK_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[2b]">MCTM1CC_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[2a]">MCTM1TR_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[29]">MCTM1UP_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from ht32f1655_56_it_1.o(i.MemManage_Handler) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from ht32f1655_56_it_1.o(i.NMI_Handler) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[3b]">PDMA_CH0_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[3c]">PDMA_CH1_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[3d]">PDMA_CH2_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[3e]">PDMA_CH3_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[3f]">PDMA_CH4_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[40]">PDMA_CH5_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[41]">PDMA_CH6_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[42]">PDMA_CH7_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from ht32f1655_56_it_1.o(i.PendSV_Handler) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[e]">RTC_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[47]">Reset_Handler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[38]">SCI_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[32]">SPI0_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[33]">SPI1_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from ht32f1655_56_it_1.o(i.SVC_Handler) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[44]">SystemInit</a> from system_ht32f1655_56.o(i.SystemInit) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[36]">UART0_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[37]">UART1_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[34]">USART0_IRQHandler</a> from uart.o(i.USART0_IRQHandler) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[35]">USART1_IRQHandler</a> from uart.o(i.USART1_IRQHandler) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[3a]">USB_IRQHandler</a> from ht32_serial.o(i.USB_IRQHandler) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from ht32f1655_56_it_1.o(i.UsageFault_Handler) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[d]">WDT_IRQHandler</a> from startup_ht32f1655_56.o(RESET) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[45]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_ht32f1655_56.o(RESET)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[47]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>BFTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>CKRDY_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>EBI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EVWUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>GPTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>GPTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>LPWUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>MCTM0BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>MCTM0CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>MCTM0TR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>MCTM0UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>MCTM1BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>MCTM1CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>MCTM1TR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>MCTM1UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>PDMA_CH0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>PDMA_CH1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>PDMA_CH2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>PDMA_CH3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>PDMA_CH4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>PDMA_CH5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>PDMA_CH6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>PDMA_CH7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1655_56.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[48]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[58]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[cd]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[ce]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[cf]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[d0]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[d1]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[4a]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SEND_Weight
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SEND_Weight
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SEND_Weight
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SEND_Weight
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[d2]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[d3]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[d4]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4d]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[49]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[d6]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ht32f1655_56_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[5c]"></a>ADC_RegularGroupConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ht32f1655_56_adc.o(i.ADC_RegularGroupConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_RegularGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[5e]"></a>ADC_RegularTrigConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f1655_56_adc.o(i.ADC_RegularTrigConfig))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[5f]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f1655_56_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[5b]"></a>AFIO_GPxConfig</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, ht32f1655_56_gpio.o(i.AFIO_GPxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM2_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HX711_Init2
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HX711_Init1
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_IO_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Write_Byte
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read_Bit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Check
</UL>

<P><STRONG><a name="[59]"></a>Adc_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, adc.o(i.Adc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Adc_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_SetADCPrescaler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularTrigConfig
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularGroupConfig
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Init
</UL>

<P><STRONG><a name="[60]"></a>All_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, include.o(i.All_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = All_Init &rArr; USART1_Init &rArr; USART_Interrupt_Init &rArr; USART_Init &rArr; CKCU_GetUSARTClockFreq &rArr; CKCU_GetClocksFrequency &rArr; CKCU_GetPLLFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM2_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HX711_Init2
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HX711_Init1
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_IO_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e]"></a>BFTM0_IRQHandler</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, ht32f1655_56_it_1.o(i.BFTM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BFTM0_IRQHandler &rArr; UART_Send_Temp &rArr; DS18B20_Get_Temp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_Temp
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SEND_Weight
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_ClearFlag
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Be_Stolen
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Sends
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>BFTM_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ht32f1655_56_bftm.o(i.BFTM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM0_IRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>BFTM_EnaCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f1655_56_bftm.o(i.BFTM_EnaCmd))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0_Init
</UL>

<P><STRONG><a name="[9d]"></a>BFTM_IntConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f1655_56_bftm.o(i.BFTM_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0_Init
</UL>

<P><STRONG><a name="[9b]"></a>BFTM_SetCompare</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f1655_56_bftm.o(i.BFTM_SetCompare))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0_Init
</UL>

<P><STRONG><a name="[9c]"></a>BFTM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f1655_56_bftm.o(i.BFTM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0_Init
</UL>

<P><STRONG><a name="[71]"></a>Be_Stolen</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ht32f1655_56_it_1.o(i.Be_Stolen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Be_Stolen &rArr; USART_Sends
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Sends
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM0_IRQHandler
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1655_56_it_1.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>CKCU_GetClocksFrequency</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ht32f1655_56_ckcu.o(i.CKCU_GetClocksFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CKCU_GetClocksFrequency &rArr; CKCU_GetPLLFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPLLFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[77]"></a>CKCU_GetPLLFrequency</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ht32f1655_56_ckcu.o(i.CKCU_GetPLLFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CKCU_GetPLLFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
</UL>

<P><STRONG><a name="[78]"></a>CKCU_GetUSARTClockFreq</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, ht32f1655_56_ckcu.o(i.CKCU_GetUSARTClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CKCU_GetUSARTClockFreq &rArr; CKCU_GetClocksFrequency &rArr; CKCU_GetPLLFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[99]"></a>CKCU_PeripClockConfig</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, ht32f1655_56_ckcu.o(i.CKCU_PeripClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[5a]"></a>CKCU_SetADCPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f1655_56_ckcu.o(i.CKCU_SetADCPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[68]"></a>CTR_IO_Init</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, init.o(i.CTR_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CTR_IO_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenDrainConfig
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Init
</UL>

<P><STRONG><a name="[7d]"></a>DS18B20_Check</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, ds18b20.o(i.DS18B20_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DS18B20_Check &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Start
</UL>

<P><STRONG><a name="[7f]"></a>DS18B20_Get_Temp</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ds18b20.o(i.DS18B20_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DS18B20_Get_Temp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Write_Byte
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Start
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read_Byte
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_Temp
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataBuffer_Deal
</UL>

<P><STRONG><a name="[6f]"></a>DS18B20_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ds18b20.o(i.DS18B20_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DS18B20_Init &rArr; DS18B20_Check &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenDrainConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Init
</UL>

<P><STRONG><a name="[84]"></a>DS18B20_Read_Bit</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ds18b20.o(i.DS18B20_Read_Bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DS18B20_Read_Bit &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read_Byte
</UL>

<P><STRONG><a name="[83]"></a>DS18B20_Read_Byte</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ds18b20.o(i.DS18B20_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DS18B20_Read_Byte &rArr; DS18B20_Read_Bit &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read_Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
</UL>

<P><STRONG><a name="[81]"></a>DS18B20_Rst</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ds18b20.o(i.DS18B20_Rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DS18B20_Rst &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Start
</UL>

<P><STRONG><a name="[80]"></a>DS18B20_Start</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ds18b20.o(i.DS18B20_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DS18B20_Start &rArr; DS18B20_Write_Byte &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Write_Byte
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
</UL>

<P><STRONG><a name="[82]"></a>DS18B20_Write_Byte</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ds18b20.o(i.DS18B20_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DS18B20_Write_Byte &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Start
</UL>

<P><STRONG><a name="[85]"></a>DataBuffer_Deal</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, main.o(i.DataBuffer_Deal))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DataBuffer_Deal &rArr; DS18B20_Get_Temp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HX711_Read1
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1655_56_it_1.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>GPIO_DirectionConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f1655_56_gpio.o(i.GPIO_DirectionConfig))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HX711_Init2
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HX711_Init1
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_IO_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Write_Byte
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read_Bit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Check
</UL>

<P><STRONG><a name="[7c]"></a>GPIO_InputConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f1655_56_gpio.o(i.GPIO_InputConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HX711_Init2
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HX711_Init1
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_IO_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read_Bit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Check
</UL>

<P><STRONG><a name="[7a]"></a>GPIO_OpenDrainConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f1655_56_gpio.o(i.GPIO_OpenDrainConfig))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HX711_Init2
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HX711_Init1
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_IO_Init
</UL>

<P><STRONG><a name="[7b]"></a>GPIO_PullResistorConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ht32f1655_56_gpio.o(i.GPIO_PullResistorConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HX711_Init2
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HX711_Init1
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_IO_Init
</UL>

<P><STRONG><a name="[88]"></a>GPIO_ReadInBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f1655_56_gpio.o(i.GPIO_ReadInBit))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KYE2_SHOW
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KYE1_SHOW
</UL>

<P><STRONG><a name="[75]"></a>GPIO_WriteOutBits</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f1655_56_gpio.o(i.GPIO_WriteOutBits))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM0_IRQHandler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Stop
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HX711_Init2
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HX711_Init1
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_IO_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0DataAnalyzing
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotor
</UL>

<P><STRONG><a name="[95]"></a>GPTM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f1655_56_gptm.o(i.GPTM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM2_Init
</UL>

<P><STRONG><a name="[94]"></a>GPTM_OutputInit</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, ht32f1655_56_gptm.o(i.GPTM_OutputInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPTM_OutputInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM2_Init
</UL>

<P><STRONG><a name="[93]"></a>GPTM_OutputStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f1655_56_gptm.o(i.GPTM_OutputStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM2_Init
</UL>

<P><STRONG><a name="[98]"></a>GPTM_SetCounterReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f1655_56_gptm.o(i.GPTM_SetCounterReload))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Control
</UL>

<P><STRONG><a name="[92]"></a>GPTM_TimeBaseInit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ht32f1655_56_gptm.o(i.GPTM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM2_Init
</UL>

<P><STRONG><a name="[91]"></a>GPTM_TimeBaseStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f1655_56_gptm.o(i.GPTM_TimeBaseStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM2_Init
</UL>

<P><STRONG><a name="[66]"></a>HX711_Init1</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, hx711.o(i.HX711_Init1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HX711_Init1 &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenDrainConfig
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Init
</UL>

<P><STRONG><a name="[67]"></a>HX711_Init2</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, hx711.o(i.HX711_Init2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HX711_Init2 &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenDrainConfig
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Init
</UL>

<P><STRONG><a name="[86]"></a>HX711_Read1</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hx711.o(i.HX711_Read1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HX711_Read1
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SEND_Weight
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataBuffer_Deal
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1655_56_it_1.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>KEY_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, key.o(i.KEY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = KEY_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Init
</UL>

<P><STRONG><a name="[87]"></a>KYE1_SHOW</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, key.o(i.KYE1_SHOW))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KYE1_SHOW
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>KYE2_SHOW</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, key.o(i.KYE2_SHOW))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = KYE2_SHOW &rArr; USART_Sends
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Sends
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>LED_Init</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, led.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LED_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Init
</UL>

<P><STRONG><a name="[8f]"></a>MCTM_CHMOECmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f1655_56_mctm.o(i.MCTM_CHMOECmd))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_Init
</UL>

<P><STRONG><a name="[90]"></a>MCTM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f1655_56_mctm.o(i.MCTM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_Init
</UL>

<P><STRONG><a name="[8e]"></a>MCTM_OutputInit</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, ht32f1655_56_mctm.o(i.MCTM_OutputInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MCTM_OutputInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_Init
</UL>

<P><STRONG><a name="[97]"></a>MCTM_SetCounterReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f1655_56_mctm.o(i.MCTM_SetCounterReload))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Control
</UL>

<P><STRONG><a name="[8d]"></a>MCTM_TimeBaseInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ht32f1655_56_mctm.o(i.MCTM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_Init
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1655_56_it_1.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>Motor_Init</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, motor.o(i.Motor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Motor_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenDrainConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Init
</UL>

<P><STRONG><a name="[8a]"></a>Motor_NAngle</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, motor.o(i.Motor_NAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Motor_NAngle &rArr; SetMotor
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotor
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0DataAnalyzing
</UL>

<P><STRONG><a name="[8c]"></a>Motor_Stop</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, motor.o(i.Motor_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motor_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0DataAnalyzing
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1655_56_it_1.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>PWM1_Init</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, pwm.o(i.PWM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PWM1_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCTM_TimeBaseInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCTM_OutputInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCTM_Cmd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCTM_CHMOECmd
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Init
</UL>

<P><STRONG><a name="[6e]"></a>PWM2_Init</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, pwm.o(i.PWM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PWM2_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_TimeBaseStructInit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_TimeBaseInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_OutputStructInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_OutputInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Init
</UL>

<P><STRONG><a name="[96]"></a>PWM_Control</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pwm.o(i.PWM_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_SetCounterReload
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCTM_SetCounterReload
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1655_56_it_1.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>RSTCU_PeripReset</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, ht32f1655_56_rstcu.o(i.RSTCU_PeripReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RSTCU_PeripReset
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DeInit
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1655_56_it_1.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>SYSTICK_ClockSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32_cm3_misc.o(i.SYSTICK_ClockSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[8b]"></a>SetMotor</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, motor.o(i.SetMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetMotor
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_NAngle
</UL>

<P><STRONG><a name="[44]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_ht32f1655_56.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>System_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, init.o(i.System_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = System_Init &rArr; CKCU_PeripClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Init
</UL>

<P><STRONG><a name="[64]"></a>Time0_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, init.o(i.Time0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Time0_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_SetCounter
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_SetCompare
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_IntConfig
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_EnaCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Init
</UL>

<P><STRONG><a name="[73]"></a>UART_SEND_Weight</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, hx711.o(i.UART_SEND_Weight))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART_SEND_Weight &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Sends
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HX711_Read1
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM0_IRQHandler
</UL>

<P><STRONG><a name="[72]"></a>UART_Send_Temp</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ds18b20.o(i.UART_Send_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UART_Send_Temp &rArr; DS18B20_Get_Temp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Sends
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM0_IRQHandler
</UL>

<P><STRONG><a name="[34]"></a>USART0_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, uart.o(i.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>USART0_Init</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, init.o(i.USART0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USART0_Init &rArr; USART_Interrupt_Init &rArr; USART_Init &rArr; CKCU_GetUSARTClockFreq &rArr; CKCU_GetClocksFrequency &rArr; CKCU_GetPLLFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxCmd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RxCmd
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Interrupt_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Init
</UL>

<P><STRONG><a name="[35]"></a>USART1_IRQHandler</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, uart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART1_IRQHandler &rArr; Motor_NAngle &rArr; SetMotor
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Stop
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_NAngle
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Sends
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>USART1_Init</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, init.o(i.USART1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USART1_Init &rArr; USART_Interrupt_Init &rArr; USART_Init &rArr; CKCU_GetUSARTClockFreq &rArr; CKCU_GetClocksFrequency &rArr; CKCU_GetPLLFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxCmd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RxCmd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Interrupt_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Init
</UL>

<P><STRONG><a name="[a4]"></a>USART_FIFOReset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht32f1655_56_usart.o(i.USART_FIFOReset))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Interrupt_Init
</UL>

<P><STRONG><a name="[a3]"></a>USART_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ht32f1655_56_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART_Init &rArr; CKCU_GetUSARTClockFreq &rArr; CKCU_GetClocksFrequency &rArr; CKCU_GetPLLFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetUSARTClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Interrupt_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[a7]"></a>USART_IntConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f1655_56_usart.o(i.USART_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Interrupt_Init
</UL>

<P><STRONG><a name="[a2]"></a>USART_Interrupt_Init</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, init.o(i.USART_Interrupt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART_Interrupt_Init &rArr; USART_Init &rArr; CKCU_GetUSARTClockFreq &rArr; CKCU_GetClocksFrequency &rArr; CKCU_GetPLLFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxCmd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TFITLConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RxCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RFITLConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntConfig
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FIFOReset
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Init
</UL>

<P><STRONG><a name="[a6]"></a>USART_RFITLConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f1655_56_usart.o(i.USART_RFITLConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Interrupt_Init
</UL>

<P><STRONG><a name="[9f]"></a>USART_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f1655_56_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[a1]"></a>USART_RxCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f1655_56_usart.o(i.USART_RxCmd))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Interrupt_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Init
</UL>

<P><STRONG><a name="[a8]"></a>USART_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f1655_56_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Sends
</UL>

<P><STRONG><a name="[74]"></a>USART_Sends</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, uart.o(i.USART_Sends))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_Sends
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_Temp
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SEND_Weight
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Be_Stolen
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM0_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0DataAnalyzing
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KYE2_SHOW
</UL>

<P><STRONG><a name="[a5]"></a>USART_TFITLConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f1655_56_usart.o(i.USART_TFITLConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Interrupt_Init
</UL>

<P><STRONG><a name="[a0]"></a>USART_TxCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f1655_56_usart.o(i.USART_TxCmd))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Interrupt_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Init
</UL>

<P><STRONG><a name="[a9]"></a>USBDCore_IRQHandler</STRONG> (Thumb, 434 bytes, Stack size 24 bytes, ht32_usbd_core.o(i.USBDCore_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBDCore_IRQHandler &rArr; USBD_EPTReadOUTData &rArr; USBD_EPTReadMemory &rArr; USBD_EPTGetBuffer1Addr &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_ControlIN
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadSETUPData
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerOn
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerOff
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetINT
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetEPTnINTNumber
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EnableINT
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTSendSTALL
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadOUTData
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetINT
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearINT
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DeInit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClearINT
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[ab]"></a>USBD_ClearINT</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i.USBD_ClearINT))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[ad]"></a>USBD_DeInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i.USBD_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBD_DeInit &rArr; RSTCU_PeripReset
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTCU_PeripReset
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[bb]"></a>USBD_EPTClearDTG</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ht32f1655_56_usbd.o(i.USBD_EPTClearDTG))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTClearDTG
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_SetClearFeature
</UL>

<P><STRONG><a name="[bd]"></a>USBD_EPTClearHalt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ht32f1655_56_usbd.o(i.USBD_EPTClearHalt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTClearHalt
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_SetClearFeature
</UL>

<P><STRONG><a name="[b5]"></a>USBD_EPTClearINT</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ht32f1655_56_usbd.o(i.USBD_EPTClearINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTClearINT
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>USBD_EPTGetBuffer0Addr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ht32f1655_56_usbd.o(i.USBD_EPTGetBuffer0Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTGetBuffer0Addr
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadMemory
</UL>

<P><STRONG><a name="[bf]"></a>USBD_EPTGetBuffer1Addr</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ht32f1655_56_usbd.o(i.USBD_EPTGetBuffer1Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_EPTGetBuffer1Addr &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBufferLen
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadMemory
</UL>

<P><STRONG><a name="[c0]"></a>USBD_EPTGetBufferLen</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ht32f1655_56_usbd.o(i.USBD_EPTGetBufferLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_ControlIN
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer1Addr
</UL>

<P><STRONG><a name="[c1]"></a>USBD_EPTGetHalt</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ht32f1655_56_usbd.o(i.USBD_EPTGetHalt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTGetHalt
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_GetStatus
</UL>

<P><STRONG><a name="[b1]"></a>USBD_EPTGetINT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ht32f1655_56_usbd.o(i.USBD_EPTGetINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTGetINT
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[c2]"></a>USBD_EPTGetTransferCount</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ht32f1655_56_usbd.o(i.USBD_EPTGetTransferCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTGetTransferCount
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadMemory
</UL>

<P><STRONG><a name="[af]"></a>USBD_EPTInit</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ht32f1655_56_usbd.o(i.USBD_EPTInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_EPTInit &rArr; USBD_EPTReset
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReset
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_Request
</UL>

<P><STRONG><a name="[c4]"></a>USBD_EPTReadMemory</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ht32f1655_56_usbd.o(i.USBD_EPTReadMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_EPTReadMemory &rArr; USBD_EPTGetBuffer1Addr &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer0Addr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_CopyMemory
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetTransferCount
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer1Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadOUTData
</UL>

<P><STRONG><a name="[b8]"></a>USBD_EPTReadOUTData</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ht32f1655_56_usbd.o(i.USBD_EPTReadOUTData))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_EPTReadOUTData &rArr; USBD_EPTReadMemory &rArr; USBD_EPTGetBuffer1Addr &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[c3]"></a>USBD_EPTReset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ht32f1655_56_usbd.o(i.USBD_EPTReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTReset
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTInit
</UL>

<P><STRONG><a name="[b4]"></a>USBD_EPTSendSTALL</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ht32f1655_56_usbd.o(i.USBD_EPTSendSTALL))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTSendSTALL
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>USBD_EPTSetHalt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ht32f1655_56_usbd.o(i.USBD_EPTSetHalt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTSetHalt
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_SetClearFeature
</UL>

<P><STRONG><a name="[b7]"></a>USBD_EPTWriteINData</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ht32f1655_56_usbd.o(i.USBD_EPTWriteINData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_EPTWriteINData &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBufferLen
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer0Addr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_CopyMemory
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetTransferCount
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_ControlIN
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[b0]"></a>USBD_EnableINT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i.USBD_EnableINT))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[b9]"></a>USBD_GetEPTnINTNumber</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i.USBD_GetEPTnINTNumber))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[aa]"></a>USBD_GetINT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i.USBD_GetINT))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[ac]"></a>USBD_PowerOff</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i.USBD_PowerOff))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[ae]"></a>USBD_PowerOn</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i.USBD_PowerOn))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[b2]"></a>USBD_ReadSETUPData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i.USBD_ReadSETUPData))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[ca]"></a>USBD_SetAddress</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i.USBD_SetAddress))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_Request
</UL>

<P><STRONG><a name="[3a]"></a>USB_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32_serial.o(i.USB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USB_IRQHandler &rArr; USBDCore_IRQHandler &rArr; USBD_EPTReadOUTData &rArr; USBD_EPTReadMemory &rArr; USBD_EPTGetBuffer1Addr &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>Uart0DataAnalyzing</STRONG> (Thumb, 630 bytes, Stack size 40 bytes, uart.o(i.Uart0DataAnalyzing))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Uart0DataAnalyzing &rArr; Motor_NAngle &rArr; SetMotor
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Stop
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_NAngle
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Sends
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1655_56_it_1.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1655_56.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[d8]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[d9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[65]"></a>delay_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_ClockSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Init
</UL>

<P><STRONG><a name="[6c]"></a>delay_ms</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_Temp
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SEND_Weight
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KYE2_SHOW
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KYE1_SHOW
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Init
</UL>

<P><STRONG><a name="[7e]"></a>delay_us</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, delay.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_NAngle
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Write_Byte
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read_Bit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Check
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = main &rArr; DataBuffer_Deal &rArr; DS18B20_Get_Temp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0DataAnalyzing
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Control
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KYE2_SHOW
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KYE1_SHOW
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataBuffer_Deal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9a]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, init.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Interrupt_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0_Init
</UL>

<P><STRONG><a name="[b6]"></a>_USBDCore_ControlIN</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ht32_usbd_core.o(i._USBDCore_ControlIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _USBDCore_ControlIN &rArr; USBD_EPTWriteINData &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBufferLen
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[c8]"></a>_USBDCore_Standard_GetStatus</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ht32_usbd_core.o(i._USBDCore_Standard_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _USBDCore_Standard_GetStatus &rArr; USBD_EPTGetHalt
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetHalt
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_Request
</UL>

<P><STRONG><a name="[b3]"></a>_USBDCore_Standard_Request</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, ht32_usbd_core.o(i._USBDCore_Standard_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _USBDCore_Standard_Request &rArr; USBD_EPTInit &rArr; USBD_EPTReset
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_SetClearFeature
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[c9]"></a>_USBDCore_Standard_SetClearFeature</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ht32_usbd_core.o(i._USBDCore_Standard_SetClearFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _USBDCore_Standard_SetClearFeature &rArr; USBD_EPTSetHalt
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTSetHalt
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearHalt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearDTG
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_Request
</UL>

<P><STRONG><a name="[c5]"></a>_USBD_CopyMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i._USBD_CopyMemory))
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_CopyMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_CopyMemory
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadMemory
</UL>

<P><STRONG><a name="[bc]"></a>_USBD_GetEPTnAddr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f1655_56_usbd.o(i._USBD_GetEPTnAddr))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTSetHalt
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTSendSTALL
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadOUTData
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetINT
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetHalt
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBufferLen
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearINT
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearHalt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearDTG
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer0Addr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReset
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetTransferCount
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer1Addr
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
